name: Build and Deploy Snapshot
on:
  push:
    branches:
      - master
      - "3.0"
      - "2.14"
    paths-ignore:
      - "README.md"
      - "release-notes/*"
  pull_request:
    branches:
      - master
      - "3.0"
      - "2.14"
    paths-ignore:
      - "README.md"
      - "release-notes/*"
  workflow_dispatch:

permissions:
  contents: read

env:
  JAVA_OPTS: "-XX:+TieredCompilation -XX:TieredStopAtLevel=1"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # As of Jackson 2.14 got Java 8 baseline so can build on later JDKs too
        java_version: ["8", "11", "17"]
        os: ["ubuntu-20.04"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: ${{ matrix.java_version }}
          cache: "maven"
      - name: Build
        run: |
          ./mvnw -B -q -ff -ntp verify

  deploy:
    needs: [build]
    runs-on: "ubuntu-20.04"
    if: github.event_name != 'pull_request'
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "8"
          cache: "maven"
          server-id: sonatype-nexus-snapshots
          server-username: CI_DEPLOY_USERNAME
          server-password: CI_DEPLOY_PASSWORD
          # See https://github.com/actions/setup-java/blob/v2/docs/advanced-usage.md#Publishing-using-Apache-Maven
          # gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          # gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
      - name: Extract project Maven version
        id: projectVersion
        run: |
          echo "version=$( \
            ./mvnw org.apache.maven.plugins:maven-help-plugin:3.3.0:evaluate \
              -DforceStdout -Dexpression=project.version -q \
          )" >> "$GITHUB_OUTPUT"
      - name: Deploy snapshot
        id: deploy
        if: endsWith(steps.projectVersion.outputs.version, '-SNAPSHOT')
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
          # MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        run: |
          ./mvnw -B -q -ff -DskipTests -ntp source:jar verify

          ARTIFACT_PATTERN=$( \
            ./mvnw help:evaluate \
              -Dexpression=project.artifactId -q -DforceStdout)-$( \
            ./mvnw help:evaluate \
              -Dexpression=project.version -q -DforceStdout)*.jar
          echo "artifact_pattern=$ARTIFACT_PATTERN" >> "$GITHUB_OUTPUT"
      # Until generator_generic_slsa3@v1.2.3, calculate hashes from ./target
      # https://github.com/slsa-framework/slsa-github-generator/issues/1225
      - name: Generate subject
        id: hash
        if: endsWith(steps.projectVersion.outputs.version, '-SNAPSHOT')
        run: |
          cd ./target

          echo "hashes=$( \
            sha256sum ${{ steps.deploy.outputs.artifact_pattern }} | \
            base64 -w0 \
          )" >> "$GITHUB_OUTPUT"

      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          path: ./target/*.jar
          name: package
          if-no-files-found: warn

  coverage:
    needs: [build]
    runs-on: "ubuntu-20.04"
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "8"
          cache: "maven"
      - name: Generate code coverage
        run: ./mvnw -B -q -ff -ntp test
      - name: Publish code coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./target/site/jacoco/jacoco.xml
          flags: unittests

  provenance:
    needs: [deploy]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.2
    with:
      base64-subjects: "${{ needs.deploy.outputs.hashes }}"
      upload-assets: true # Optional: Upload to a new release
